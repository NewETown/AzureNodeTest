{
  "name": "azure-media",
  "version": "1.0.11",
  "homepage": "https://github.com/fritzy/node-azure-media",
  "repository": {
    "type": "git",
    "url": "git@github.com:fritzy/node-azure-media.git"
  },
  "description": "Node SDK for Azure's Media Service",
  "dependencies": {
    "async": "^0.2.10",
    "moment": "^2.8.3",
    "node-uuid": "^1.4.1",
    "nodeunit": "^0.8.6",
    "request": "^2.34.0",
    "verymodel": "^1.10.1"
  },
  "main": "index.js",
  "readme": "# Azure Media for Node.js\n\n**Attention!!! Many bugs. Still working on it..**\n\nAzure's Media REST API provides a way to store, encode, and deliver media (video and images).\nThis library makes using the API easier.\n\n    var AzureMedia = require('azure-media');\n    var myconfig = require('./myconfig');\n\n    var api = new AzureMedia(myconfig); // {client_id: 'your azure media id', client_secret: 'your azure media secret'} \n    api.init(function (err) {\n        // do your work here or after this callback\n    });\n\n## Install\n\nnpm install azure-media\n\n## Using Microsoft's Documentation\n\nAll of the data structures and endpoints used in this library are documented in [Azure Media Service REST API Reference](http://msdn.microsoft.com/en-us/library/windowsazure/hh973617.aspx).\n\nEach subsection is modeled based on its \"Entity Properties\" section (eg. [Asset Entity Properties](http://msdn.microsoft.com/en-us/library/windowsazure/hh974277.aspx#asset_entity_properties)).\n\nEach model usable at `API.rest.[lowercase model name]` with create, get, update, list methods.\n\n## REST Endpoints\n\nAll REST endpoints are in the initialized api lib at api.rest.someendpoint (eg. `api.rest.asset`)\n\n\"data\" is a JavaScript object for the appropriate endpoint model documented in the Properties section of each model in [Azure Media Service REST API Reference](http://msdn.microsoft.com/en-us/library/windowsazure/hh973617.aspx).  \nCallbacks generally return an object, called a model. It uses [VeryModel](https://github.com/fritzy/VeryModel). VeryModel instances behave like normal objects. If you want a simpler object, call `.toObject()` and use the returned value.\n\nEach endpoint will have some of the following methods:\n\n### update\nSignature: `update(id, data, callback)`  \nCallback: `function (err, model)`\n\n### create\nSignature: `create(data, callback)`  \nCallback: `function(err, model)`\n\nExample:\n\n    api.rest.asset.create({Name: 'Some Asset'}, function (err, asset) {\n        if (err) {\n            console.log(err);\n        } else {\n            console.log(\"Created asset: \" + asset.Id);\n        }\n    });\n\n### delete\nSignature: `delete(id, callback)`  \nCallback: `function(err)`\n\n### get\nSignature: `get(id, callback)`  \nCallback: `function(err, model)`\n\n### list\nSignature: `list(callback, query)`  \nCallback: `function(err, model)`\n\nThe `query` parameter is a JavaScript object of the query parameters documented in [OData Query String Options](http://www.odata.org/documentation/odata-v2-documentation/uri-conventions/#4_Query_String_Options) (eg: `{'$filter': \"Name eq 'Bill'\"}`)\n\n###accesspolicy\n\nAccessPolicys should be reused, rather than just creating a new one for every use.\nSo rather than create, or trying to manage this yourself, use\n\nSignature: `findOrCreate(durationInMinutes, permissions, callback)`  \nCallback: `function (err, accesspolicy_model)`\n\n###assetfileindex\n###ingestmanifestasset\n###job\n\nSignature: `cancel(id, callback)`  \nCallback: `function (err)`\n\n###locator\n###notificationendpoint\n###tasktemplate\n###asset\n\n\n###contentkey\n###ingestmanifest\n###ingestmanifestfile\n###jobtemplate\n###mediaprocessor\n###task\n\n## Models\n\nMost callbacks return a [VeryModel](https://github.com/fritzy/VeryModel) instance.\nThese are based on Microsoft's documentation and are implemented in /models/\n\nSome models have extra ORM-like methods, allowing you to interact with the model itself which will work with the Azure REST API behind the scenes.\n\n###accesspolicy\n###assetfileindex\n###ingestmanifestasset\n###job\n###locator\n###notificationendpoint\n###tasktemplate\n###asset\n###contentkey\n###ingestmanifest\n###ingestmanifestfile\n###jobtemplate\n###mediaprocessor\n###task\n\n## Workflow Methods\n\n###uploadStream\n\n    api.uploadStream('somefile.mp4', fs.createReadStream('/some/file.mp4'), fs.statSync('/some/file.mp4').size, function (err, assetId) {\n        if(!err) {\n            console.log(\"done uploading\");\n        }\n    });\n\n### downloadStream\n\n    api.downloadStream(assetId, fs.createWriteStream('/some/download/path.mp4'), function (err) {\n    });\n\n### getDownloadURL\n    api.getDownloadURL(assetId, fs.createWriteStream('/some/download/path.mp4'), function (err, url) {\n    });\n\n### encodeVideo\n\n    api.encodeVideo(assetId, 'H264 Broadband SD 4x3', function (err, job)) {\n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fritzy/node-azure-media/issues"
  },
  "_id": "azure-media@1.0.11",
  "_shasum": "4092b99b051be4102e4a0294355b53761c18a0e5",
  "_from": "azure-media@",
  "_resolved": "https://registry.npmjs.org/azure-media/-/azure-media-1.0.11.tgz"
}
