{
  "name": "verymodel",
  "version": "1.10.1",
  "homepage": "https://github.com/fritzy/VeryModel",
  "repository": {
    "type": "git",
    "url": "git@github.com:fritzy/VeryModel.git"
  },
  "description": "A full model system without the framework",
  "dependencies": {
    "validator": "~2.1.0",
    "underscore": "^1.6.0"
  },
  "devDependencies": {
    "nodeunit": "0.8.1",
    "precommit-hook": "0.3.5"
  },
  "scripts": {
    "test": "node_modules/nodeunit/bin/nodeunit tests/tests.js"
  },
  "main": "index.js",
  "readme": "VeryModel\n=========\n\nA JavaScript model system for validation, creation, and editing of models.\n\nI wrote this because the robust model systems that I found were tightly integrated with frameworks, or only served to be useful for validation.  \nVeryModel is not tied to a framework, and it implements a full purpose Model system.\n\n## OK, But What Is It?\n\nModels are useful for managing the lifecycle of an object.\nThey are commonly used for framework ORMs (Object Relational Managers) and the M in MVC (Model-View-Controller) patterns like Backbone.js.\n\nModels can also be extended with functionality for interacting with databases and network/HTTP APIs, making them little SDKs\nspecific to each type of data you deal with.\n\n## Quick Example\n\n\n## Definitions, Model Factory, Model Instances\n\nverymodel.VeryModel is a constructor (must be called with new) that takes a definition (object of fields and parameters).  \n\n    var verymodel = require('verymodel');\n    \n    // setup your factory\n    var SomeModelFactory = new verymodel.VeryModel({\n        //definition here\n        some_field: {\n            // field parameters (see Definition Spec below)\n        },\n        some_other_field: {\n            // field parameters (see Definition Spec blow)\n        },\n    }); \n    \n    // create an instance of a model\n    var model_instance = SomeModelFactory.create({\n        //initial model data here\n    }); \n\nThe resulting object is a [factory](http://en.wikipedia.org/wiki/Factory_%28software_concept%29) that produces model instances based on the defintion with the `.create(values)` method.\n\nModel instances are working instances of your object data. They use property setters/getters to interface with your data, and are **not** simple JSON style objects.\n\n## Adding functionality\n\nBoth Model Factories and Model Instances can be extended to add parameters and functions, typically used for database interactions like `load` and `save()` or HTTP REST calls like `list()`, `get()`, `post()`, `put()`, `delete()`.\n\nFunctions that load data should be added onto the Factory like load, list, getByName, etc.\n\n    //these functions can be named anything, do anything, and have any parameters.\n    //extending the factory with new functions is useful for dealing with the model BEFORE it contains any data (like loading/getting)\n    SomeModelFactory.load = function (id, callback) { //most IO in Node.js is async, so here's an callback example\n        db.get(id, function (err, result) {\n            callback(err, this.create(result));\n        });\n    }\n\n    SomeModelFactory.list = function (offset, count, callback) {\n        db.select(\"SELECT * FROM SomeTable LIMIT %d %d\", offset, count, function (err, results) {\n            var model_instances = [];\n            if (!err) {\n                results.\n            }\n        });\n    }\n\nFunctions that you want to use on Model Instances like save, delete is extended with `extendModel`.\n\n    SomeModelFactory.extendModel({\n        save: function (callback) {\n            db.set(this.key, this.toJSON(), callback);\n        },\n        delete: function (callback) {\n            db.del(this.key, callback);\n        }\n    });\n\n\n## Definition Spec\n\nModel defintions are recursive Javascript object. At each layer, you can have the following fields:\n\n* `required` (boolean): Error on validation if this field isn't set.\n* `type` (VeryType): VeryType chain to validate field against if set.\n* `default` (any): Default value set automatically. If you use a mutable object, use a function that returns a new instance instead.\n* `model` (definition object or VeryModel): set this field as another model.\n* `collection` (definition object or VeryModel): set this field as a collection of a model.\n* `derive` `function`): Derive the value of this field with this function whenever field is accessed\n    `{derive: function(model) {return model.first + ' ' + model.last}`\n* `depends` ({some_other_field: VeryType or true}, ...): Require other fields when this field is set, optionally run VeryType chain check on other field.\n* `private` (boolean): `toObject()` will not include this field in expect unless the argument withPrivate is true\n* `processIn` (function): value will be transformed on set via the `processIn` function\n* `processOut` (function): value will be transformed on set via the `processOut` function when `toObject()` is called\n* `onSet` (function): similar to processIn, but not run during the create() process, only when a value is directly assigned.\n\n**Node: context (`this`) on all function calls are the model instance, in order to give you access within your functions**\n\n## VeryType\n\nVeryType is a wrapper on [node-validator](https://raw2.github.com/chriso/node-validator/),\nthe only change being that we can define a validation seperately from using it.\n\n    var verymodel = require('verymodel')\n    var SomeFactory = new verymodel.VeryModel({\n        some_field: {\n            type: new VeryType().isEmail().isLength(5, 40),\n            required: true,\n            default: 'example@example.com'\n        }\n    });\n\nHere are all of the node-validator functions (lifted from their README).\n\n**NOTE: the first str value must be omitted when used with the VeryType wrapper**\n\n- **equals(str, comparison)** - check if the string matches the comparison.\n- **contains(str, seed)** - check if the string contains the seed.\n- **matches(str, pattern [, modifiers])** - check if string matches the pattern. Either `matches('foo', /foo/i)` or `matches('foo', 'foo', 'i')`.\n- **isEmail(str)** - check if the string is an email.\n- **isURL(str)** - check if the string is an URL.\n- **isIP(str [, version])** - check if the string is an IP (version 4 or 6).\n- **isAlpha(str)** - check if the string contains only letters (a-zA-Z).\n- **isNumeric(str)** - check if the string contains only numbers.\n- **isAlphanumeric(str)** - check if the string contains only letters and numbers.\n- **isHexadecimal(str)** - check if the string is a hexadecimal number.\n- **isHexColor(str)** - check if the string is a hexadecimal color.\n- **isLowercase(str)** - check if the string is lowercase.\n- **isUppercase(str)** - check if the string is uppercase.\n- **isInt(str)** - check if the string is an integer.\n- **isFloat(str)** - check if the string is a float.\n- **isDivisibleBy(str, number)** - check if the string is a number that's divisible by another.\n- **isNull(str)** - check if the string is null.\n- **isLength(str, min [, max])** - check if the string's length falls in a range.\n- **isUUID(str [, version])** - check if the string is a UUID (version 3, 4 or 5).\n- **isDate(str)** - check if the string is a date.\n- **isAfter(str [, date])** - check if the string is a date that's after the specified date (defaults to now).\n- **isBefore(str [, date])** - check if the string is a date that's before the specified date.\n- **isIn(str, values)** - check if the string is in a array of allowed values.\n- **isCreditCard(str)** - check if the string is a credit card.\n- **isISBN(str [, version])** - check if the string is an ISBN (version 10 or 13).\n\n### Using Model Instances\n\nModels can be treated like normal objects. Each field has a getter/setter.\n\n    somemodelinstance.defined_field = 'hello';\n\nModels also refer to their `__parent`\n\n\n`loadData(data)`\n\nRather than setting fields individually, set them en masse with an object.\n\n`toJSON()`\n\nExport an object with no getters, setters, state, etc... just the object with derived fields.\n\n`doValidate()`\n\nreturns an array of error strings.\n\n`getOldModel()`\n\nReturns a new model instance as Factory.create(this.toJSON()) using the data from the original create call.\n\n`getChanges()`\n\nReturns an object of changed fields from create with 'then' and 'now' values.\n    \n    {\n        field1: {then: 'cheese', now: 'ham'},\n        field2: {then: 'whoever', now: 'whomever'}\n    }\n\n`diff(othermodelinstance)`\n\nReturns an object of different fields with 'left' and 'right' values.\n    \n    {\n        field1: {left: 'cheese', right: 'ham'},\n        field2: {left: 'whoever', right: 'whomever'}\n    }\n\n`isSet(field)`\n\nReturns boolean if the field is not undefined. Useful in processIn and derived functions to prevent recursion.\n\n\n## \\_\\_verymeta\n\nModel instances have access to a variable, `this.__verymeta.model`, which is the Model Factory used to make this Model Instance.\n\n### Validate and Name Function Arguments\n\nModel definitions can be objects or arrays.  \nUsing an array definition, we can use VeryModel help manage function arguments (mapping, optional arguments, and validation).\n    \n```javascript\ndoItArgs = new VeryModel([\n    {required: true, keyword: 'msg'},\n    {required: true, type: VeryType().isIn('small', 'big', 'huge'), default: 'small'},\n    {required: false, keyword: 'save', default: false, type: 'boolean'},\n    {required: true, keyword: 'cb', type: 'function'}\n]);\n\nfunction doIt() {\n    var args = doItArgs.create(arguments);\n    var errors = args.doValidate();\n    args.cb(errors, args.type, args.msg, args.save);\n}\n\ndoIt('hi there', function(err, type, msg, save) {\n    console.log(\"Made it!\");\n});\n```\n\n## Install\n\n`npm install verymodel`\n\n#### Extended Example Definition\n\n    var generaldef = {\n        name: {\n            required: true,\n            model: {\n                first: {required: false, type: VeryType().isAlpha().len(2, 25)},\n                last: {required: false, type: VeryType().isAlpha().len(3, 25)},\n                title: {depends: {last: true},\n                full: {derive: function (name) {\n                    return (typeof name.title !== 'undefined' ? name.title + ' ' : '') + (typeof name.first !== 'undefined' ? name.first + ' ': '') + name.last;\n                    }\n                }\n            }\n        },\n        knowledge: {collection: {\n                name: {required: true},\n                category: {required: true, type: VeryType().isIn(['vegetable', 'animal', 'mineral'])}\n            }\n        },\n        rank: {\n            required: true,\n            type: VeryType().isIn(['Private', 'Corpral', 'Major', 'General', 'Major-General']),\n            default: 'Major-General'\n        }\n    };\n\n\n### Extended Example Usage\n\nThis class interprets defintions and spawns models from `create`.\n\nInitialize with a definition.\n\n    var MajorGeneral = new VeryModel(generaldef);\n    var stanley = MajorGeneral.create({\n        name: {title: 'Major-General', last: 'Stanley'},\n        rank: 'Major-General',\n        knowledge: [{name: 'animalculous', category: 'animal'}, {name: 'calculus', category: 'mathmatical'}]\n    });\n    var errors = stanley.doValidate();\n    console.log(errors);\n\nOutput:\n\n    [ 'knowledge[1].category: Unexpected value or invalid argument' ]\n\nTurns out he knows more than just animals, vegetables, minerals.\n\n    stanley.knowledge[1].category = 'vegetable';\n\nThat ought to do it.\n    \n    var errors = stanley.doValidate();\n    console.log(errors);\n\nOutput:\n\n    []\n\nLet's see what our object looks like:\n\n    console.log(stanley.toObject());\n\nOutput:\n\n    { name:\n       { last: 'Stanley',\n         title: 'Major-General',\n         full: 'Major-General Stanley' },\n      knowledge:\n       [ { name: 'animalculous', category: 'animal' },\n         { name: 'calculus', category: 'vegetable' } ],\n      rank: 'Major-General' }\n\nNoticed that the derived field, `name.full` was populated.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fritzy/VeryModel/issues"
  },
  "_id": "verymodel@1.10.1",
  "_shasum": "b1564f4afc2464cfb1ccac9b176951eecb2d4a98",
  "_from": "verymodel@^1.10.1",
  "_resolved": "https://registry.npmjs.org/verymodel/-/verymodel-1.10.1.tgz"
}
